//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.ServiceMethod {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMethod.IServiceFiltering")]
    public interface IServiceFiltering {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/GetDataFromDataBase", ReplyAction="http://tempuri.org/IServiceFiltering/GetDataFromDataBaseResponse")]
        System.Data.DataTable GetDataFromDataBase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/GetDataFromDataBase", ReplyAction="http://tempuri.org/IServiceFiltering/GetDataFromDataBaseResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDataFromDataBaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/FilteringScreenAspectRadio", ReplyAction="http://tempuri.org/IServiceFiltering/FilteringScreenAspectRadioResponse")]
        System.Data.DataTable FilteringScreenAspectRadio(System.Data.DataTable dt, string brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/FilteringScreenAspectRadio", ReplyAction="http://tempuri.org/IServiceFiltering/FilteringScreenAspectRadioResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> FilteringScreenAspectRadioAsync(System.Data.DataTable dt, string brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/filteringBrand", ReplyAction="http://tempuri.org/IServiceFiltering/filteringBrandResponse")]
        System.Data.DataTable filteringBrand(System.Data.DataTable dt, string brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/filteringBrand", ReplyAction="http://tempuri.org/IServiceFiltering/filteringBrandResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> filteringBrandAsync(System.Data.DataTable dt, string brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/AspectRadio", ReplyAction="http://tempuri.org/IServiceFiltering/AspectRadioResponse")]
        string[] AspectRadio();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceFiltering/AspectRadio", ReplyAction="http://tempuri.org/IServiceFiltering/AspectRadioResponse")]
        System.Threading.Tasks.Task<string[]> AspectRadioAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceFilteringChannel : ClientApp.ServiceMethod.IServiceFiltering, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceFilteringClient : System.ServiceModel.ClientBase<ClientApp.ServiceMethod.IServiceFiltering>, ClientApp.ServiceMethod.IServiceFiltering {
        
        public ServiceFilteringClient() {
        }
        
        public ServiceFilteringClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceFilteringClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceFilteringClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceFilteringClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetDataFromDataBase() {
            return base.Channel.GetDataFromDataBase();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDataFromDataBaseAsync() {
            return base.Channel.GetDataFromDataBaseAsync();
        }
        
        public System.Data.DataTable FilteringScreenAspectRadio(System.Data.DataTable dt, string brand) {
            return base.Channel.FilteringScreenAspectRadio(dt, brand);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FilteringScreenAspectRadioAsync(System.Data.DataTable dt, string brand) {
            return base.Channel.FilteringScreenAspectRadioAsync(dt, brand);
        }
        
        public System.Data.DataTable filteringBrand(System.Data.DataTable dt, string brand) {
            return base.Channel.filteringBrand(dt, brand);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> filteringBrandAsync(System.Data.DataTable dt, string brand) {
            return base.Channel.filteringBrandAsync(dt, brand);
        }
        
        public string[] AspectRadio() {
            return base.Channel.AspectRadio();
        }
        
        public System.Threading.Tasks.Task<string[]> AspectRadioAsync() {
            return base.Channel.AspectRadioAsync();
        }
    }
}
